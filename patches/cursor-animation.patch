diff --git a/src/nsterm.h b/src/nsterm.h
index 3c9158fc149..e2afca57641 100644
--- a/src/nsterm.h
+++ b/src/nsterm.h
@@ -485,6 +485,7 @@ #define NSTRACE_UNSILENCE()
   struct frame *emacsframe;
   int scrollbarsNeedingUpdate;
   NSRect ns_userRect;
+  CALayer *cursor_layer;
 }
 
 /* AppKit-side interface */
diff --git a/src/nsterm.m b/src/nsterm.m
index 258b5594647..d69ae89f897 100644
--- a/src/nsterm.m
+++ b/src/nsterm.m
@@ -71,6 +71,7 @@ Updated by Christian Limpach (chris@nice.ch)
 #include "macfont.h"
 #include <Carbon/Carbon.h>
 #include <IOSurface/IOSurface.h>
+#include <QuartzCore/QuartzCore.h>
 #endif
 
 static EmacsMenu *dockMenu;
@@ -3069,6 +3070,9 @@ Note that CURSOR_WIDTH is meaningful only for (h)bar cursors.
       return;
     }
 
+  if (!active_p)
+    return;
+
   get_phys_cursor_geometry (w, glyph_row, phys_cursor_glyph, &fx, &fy, &h);
 
   /* The above get_phys_cursor_geometry call set w->phys_cursor_width
@@ -3100,54 +3104,69 @@ Note that CURSOR_WIDTH is meaningful only for (h)bar cursors.
   /* Prevent the cursor from being drawn outside the text area.  */
   r = NSIntersectionRect (r, ns_row_rect (w, glyph_row, TEXT_AREA));
 
-  ns_focus (f, NULL, 0);
-
-  NSGraphicsContext *ctx = [NSGraphicsContext currentContext];
-  [ctx saveGraphicsState];
-#ifdef NS_IMPL_GNUSTEP
-  GSRectClipList (ctx, &r, 1);
-#else
-  NSRectClip (r);
-#endif
-
   [FRAME_CURSOR_COLOR (f) set];
 
-  switch (cursor_type)
+  EmacsView *view = FRAME_NS_VIEW (f);
+  CALayer *cursor_layer = view->cursor_layer;
+  r.origin.y = [view bounds].size.height - r.size.height - r.origin.y;
+  [CATransaction begin];
+  [CATransaction setAnimationDuration:0.1];
+  cursor_layer.backgroundColor = FRAME_CURSOR_COLOR (f).CGColor;
+  if (cursor_type == BAR_CURSOR)
     {
-    case DEFAULT_CURSOR:
-    case NO_CURSOR:
-      break;
-    case FILLED_BOX_CURSOR:
-      /* The call to draw_phys_cursor_glyph can end up undoing the
-	 ns_focus, so unfocus here and regain focus later.  */
-      [ctx restoreGraphicsState];
-      ns_unfocus (f);
-      draw_phys_cursor_glyph (w, glyph_row, DRAW_CURSOR);
-      ns_focus (f, &r, 1);
-      break;
-    case HOLLOW_BOX_CURSOR:
-      /* This works like it does in PostScript, not X Windows.  */
-      [NSBezierPath strokeRect: NSInsetRect (r, 0.5, 0.5)];
-      [ctx restoreGraphicsState];
-      break;
-    case HBAR_CURSOR:
-      NSRectFill (r);
-      [ctx restoreGraphicsState];
-      break;
-    case BAR_CURSOR:
-      s = r;
-      /* If the character under cursor is R2L, draw the bar cursor
-         on the right of its glyph, rather than on the left.  */
       cursor_glyph = get_phys_cursor_glyph (w);
       if ((cursor_glyph->resolved_level & 1) != 0)
-        s.origin.x += cursor_glyph->pixel_width - s.size.width;
-
-      NSRectFill (s);
-      [ctx restoreGraphicsState];
-      break;
-    }
-
-  ns_unfocus (f);
+        r.origin.x += cursor_glyph->pixel_width - r.size.width;
+    }
+  cursor_layer.frame = r;
+  [CATransaction commit];
+
+//   ns_focus (f, NULL, 0);
+
+//   NSGraphicsContext *ctx = [NSGraphicsContext currentContext];
+//   [ctx saveGraphicsState];
+// #ifdef NS_IMPL_GNUSTEP
+//   GSRectClipList (ctx, &r, 1);
+// #else
+//   NSRectClip (r);
+// #endif
+
+//   switch (cursor_type)
+//     {
+//     case DEFAULT_CURSOR:
+//     case NO_CURSOR:
+//       break;
+//     case FILLED_BOX_CURSOR:
+//       /* The call to draw_phys_cursor_glyph can end up undoing the
+// 	 ns_focus, so unfocus here and regain focus later.  */
+//       [ctx restoreGraphicsState];
+//       ns_unfocus (f);
+//       draw_phys_cursor_glyph (w, glyph_row, DRAW_CURSOR);
+//       ns_focus (f, &r, 1);
+//       break;
+//     case HOLLOW_BOX_CURSOR:
+//       /* This works like it does in PostScript, not X Windows.  */
+//       [NSBezierPath strokeRect: NSInsetRect (r, 0.5, 0.5)];
+//       [ctx restoreGraphicsState];
+//       break;
+//     case HBAR_CURSOR:
+//       NSRectFill (r);
+//       [ctx restoreGraphicsState];
+//       break;
+//     case BAR_CURSOR:
+//       s = r;
+//       /* If the character under cursor is R2L, draw the bar cursor
+//          on the right of its glyph, rather than on the left.  */
+//       cursor_glyph = get_phys_cursor_glyph (w);
+//       if ((cursor_glyph->resolved_level & 1) != 0)
+//         s.origin.x += cursor_glyph->pixel_width - s.size.width;
+
+//       NSRectFill (s);
+//       [ctx restoreGraphicsState];
+//       break;
+//     }
+
+//   ns_unfocus (f);
 }
 
 
@@ -9298,6 +9317,17 @@ - (instancetype) initWithEmacsFrame: (struct frame *) f
       [boundingView addSubview:view];
       [self makeFirstResponder:view];
 
+      /* Overlay a canvas view on top of EmacsView.  */
+      NSView *canvasView = [[NSView alloc] initWithFrame:view.bounds];
+      canvasView.wantsLayer = YES;
+      canvasView.autoresizingMask = NSViewWidthSizable | NSViewHeightSizable;
+      [view addSubview:canvasView positioned:NSWindowAbove relativeTo:nil];
+
+      /* Create a cursor layer on the canvas.  */
+      view->cursor_layer = [CALayer layer];
+      [canvasView.layer addSublayer: view->cursor_layer];
+      view->cursor_layer.frame = CGRectMake(0, 0, 0, 0);
+
 #if !defined (NS_IMPL_COCOA) || MAC_OS_X_VERSION_MIN_REQUIRED <= 1090
 #if MAC_OS_X_VERSION_MAX_ALLOWED > 1090
       if ([self respondsToSelector: @selector(useOptimizedDrawing:)])
-- 
2.39.3 (Apple Git-146)

