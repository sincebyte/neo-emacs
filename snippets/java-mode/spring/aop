# -*- mode: snippet -*-
# name: aop
# key: aop
# --
package `(mapconcat 'identity (split-string (replace-regexp-in-string ".*src\\(/\\(main\\|test\\)\\)?\\(/java\\)?" "" default-directory) "/" t) ".")`;

import org.aopalliance.aop.Advice;
import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.aop.Pointcut;
import org.springframework.aop.support.AbstractPointcutAdvisor;
import org.springframework.aop.support.annotation.AnnotationMatchingPointcut;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * 自定义Advisor
 * @author author
 * @time `(format-time-string "%Y-%m-%d %H:%M:%S")`
 **/
@Slf4j
@Component
public class `(file-name-sans-extension (buffer-name))` extends AbstractPointcutAdvisor {

    @Override
    public Pointcut getPointcut() {
        // 引入注解切面
        return AnnotationMatchingPointcut.forMethodAnnotation(`(file-name-sans-extension (buffer-name))`Ins.class);
    }

    @Override
    public Advice getAdvice() {
        return new MethodInterceptor() {

            @Override
            public Object invoke(MethodInvocation invocation) throws Throwable {
                log.info("\n==== [log]: {}", "进入切面");
                Object result = invocation.proceed();
                return result;
            }
        };
    }
}