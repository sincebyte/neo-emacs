#+title: neo emacs
#+AUTHOR: sincebyte
# #!define DARKORANGE/LIGHTORANGE/DARKBLUE/LIGHTBLUE/DARKRED/LIGHTRED/DARKGREEN/LIGHTGREEN
# #!includeurl /Users/van/org/org-roam/C4-PlantUML/juststyle.puml
#+SETUPFILE: ~/.doom.d/org-head.setup
#+HTML_HEAD: <a href="https://github.com/vanniuner/neo-emacs" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

#+OPTIONS: prop:nil timestamp:t \n:t ^:nil f:t toc:t author:t num:t H:1
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: elegantpaper
#+MACRO: htmlred @@html:<font color="red"></font>@@
#+MACRO: latexred @@latex:{\color{red}@@@@latex:}@@
#+latex:\newpage

[[https://img.shields.io/badge/neo_emacs-v3.0-green.svg]]  [[https://img.shields.io/badge/based_on-doom_emacs-red.svg?color=3152A0]]  [[https://img.shields.io/badge/macos-full_supported-red.svg?logo=macos&color=55C2E1]] [[https://img.shields.io/badge/windows-almost_supported-red.svg?logo=windows&color=3498DB]]
[[https://img.shields.io/badge/eclipse-jdt_1.27.1-red.svg?logo=eclipse&color=2C2255]] [[https://img.shields.io/badge/supports-Emacs_27.1_to_29.1-red.svg?logo=gnuemacs&color=7F5AB6]]


[[file:./image-use.png]]
* About
Neo emacs is a configuration framework for GNU Emacs which is based on doom emacs and focuses on the java web application coding environment. Neo emacs has the following features:
- Code completion: Lsp-java supports maven and gradle project.
- Program debugging: Dap-java supports program debugging.
- Http client: Rest-client is a tool to manually explore and test HTTP REST webservices just like Postman.
- SQL client: Ejc-sql turns Emacs into a simple SQL client which supports various databases.
- Redis client: Eredis Non-blocking Redis client with focus on performance and robustness.
- Terminal emulator: Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm.
- Knowledge management system: Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking.
- [[http://1.117.167.195/doc/neo-emacs.html][onlinedoc]]

* How to install
** Install emacs
#+begin_quote
Most of the time, for safety you should install emacs by brew or complie it from source ,that will give you a better compatibility.
In other words, try not to install emacs throuht Free installation package like Gnu Emacs below.
#+end_quote

There have many emacs distribution,just choose one and install it.
- [[https://github.com/railwaycat/homebrew-emacsmacport][EmacsPorts]] is the best choice to run NeoEmcas on macos now.
  #+begin_src shell
  brew tap railwaycat/emacsmacport
  brew install emacs-mac --with-natural-title-bar --with-mac-metal \
  --with-librsvg --with-starter --with-emacs-big-sur-icon --with-native-comp \
  defaults write org.gnu.Emacs TransparentTitleBar DARK \
  defaults write org.gnu.Emacs HideDocumentIcon kES
  #+end_src
- [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs-plus]] which I used for a long time once.
  #+begin_src shell
  brew tap d12frosted/emacs-plus
  brew install emacs-mac --with-natural-title-bar \
  --with-mac-metal --with-librsvg --with-starter \
  --with-emacs-big-sur-icon --
  #+end_src
- [[https://www.gnu.org/software/emacs/][Gnu-Emacs]] is the official emacs client which I used for windows platform.
- [[https://git.savannah.gnu.org/cgit/emacs.git][Source Code]] Building form source which I use rarely.
  building emacs with with source code
  #+begin_src shell -n
  git clone git://git.savannah.gnu.org/emacs.git
  cd emacs
  git checkout emacs-28
  brew install  libxml2
  make configure
  ./configure --with-native-compilation --with-modern-papirus-icon --with-no-titlebar
  make -j4
  make install
  open nextstep/Emacs.app
  #+end_src

After emacs installation, set environment variables which names EMACS ,this depends on your emacs exec path.
#+begin_src shell
export EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
#+end_src

** Clone project
clone doom-emacs and neo-emacs from github.
#+BEGIN_SRC shell
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
git clone --depth 1 https://github.com/vanniuner/neo-emacs.git ~/.doom.d/
#+END_SRC
** Doom Install
Set up a vpn if you need it.

#+BEGIN_SRC shell
export http_proxy="ip:port"
export https_proxy="ip:port"
#+END_SRC

Set your emacs cmd for doom install.

#+BEGIN_SRC shell
export EMACS= $YOUR EMACS CMD PATH$
#+END_SRC

Make sure there have Cmake lib or install it.
- Ubuntu
  #+begin_src shell
  sudo apt install cmake
  sudo apt install libtool-bin
  #+end_src
- MacOs
  #+begin_src shell
  sudo brew install cmake libtool gnuplot d2 ripgrep fzf d2 terrastruct/tap/tala
  #+end_src

At last run below, this will take few minutes. And it depends on the quality of your network.

#+BEGIN_SRC shell
~/.emacs.doom/bin/doom install
~/.emacs.doom/bin/doom.cmd install
#+END_SRC

* How to update
** For brew
#+begin_src shell
brew upgrade
brew update && brew upgrade emacs-mac && brew cleanup emacs-mac
#+end_src
** For doom project
#+begin_src shell
export EMACS=/Applications/Emacs.app/Contents/MacOS/EMACS
sh ~/.emacs.d/bin/doom upgrade
sh ~/.emacs.d/bin/doom install
sh ~/.emacs.d/bin/doom sync
#+end_src
* Private setting
Customize your private setting config in the config.el ; use ~setq~

** Font setting
Before start up,install fonts in the [[./neoemacs/font]] directory firstly.
Cause different platform have different font name,after font installed there need a adjustment based on the fact.
*** setting on macos
#+begin_src elisp
(setq doom-font (font-spec :family "victor Mono" :size 19 ))
(defun init-cjk-fonts()
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
      charset (font-spec :family "HYXinRenWenSongW" :size 20))))
(add-hook 'doom-init-ui-hook 'init-cjk-fonts)
#+end_src
*** setting on windows
#+begin_src  elisp
(setq doom-font (font-spec :family "victor Mono Medium" :size 24))
(defun init-cjk-fonts()
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
      charset (font-spec :family "汉仪新人文宋W" :size 26))))
(add-hook 'doom-init-ui-hook 'init-cjk-fonts)
#+end_src

*** install all-the-icons
For the icons font, we need do below
- M-x install-package all-the-icons
- M-x all-the-icons-install-fonts
- M-x nerd-icons-install-fonts
** Basic setting
#+CAPTION: neo-emacs basic setting
| <l>                       | <l>                                     | <l>                              | <l>                     |
| variable                  | default value                           | config location                  | description             |
| emacs-module-root         | /opt/homebrew/opt/emacs-plus@28/include | config.el                        | emcas module root       |
| display-line-numbers-type | nil                                     | config.el                        | show line number        |
| org-directory             | ~/org/                                  | config.el                        | org           root path |
| rg-exec-path              | system path                             | -                                | -                       |
| fd-exec-path              | system path                             | -                                | -                       |
| dot-exec-path             | /opt/homebrew/bin/dot                   | modules/neo-emacs/org/config.el  | dot           exec path |
| pdflatex-exec-path        | /Library/TeX/texbin/pdflatex            | modules/neo-emacs/org/config.el  | pdflatex      exec path |
| org-roam-directory        | ~/org/org-roam                          | modules/neo-emacs/org/config.el  | org roam      root path |
| lsp-java-jdt-download-url | http://1.117.167.195/download           | modules/neo-emacs/java/config.el | jdt-server URL          |
| lsp-java-java-path        |                                         | modules/neo-emacs/java/config.el | java11        exec path |
| lsp-maven-path            | ~/.m2/settings.xml                      | modules/neo-emacs/java/config.el | maven setting path      |
| rime-user-data-dir        | ~/Library/Rime/                         | modules/neo-emacs/rime/config.el | rime config input       |
| rime-librime-root         | ~/.doom.d/myconfig/rime-macos/dist      | modules/neo-emacs/rime/config.el | emacs-rime/blob/master/ |

#+begin_quote
recentfile save default dir: ~/.emacs.d/.local/cache/recentf
#+end_quote
* Neoemacs modules
** Lsp Java
[[./modules/neo-emacs/java/readme.org][futher more java readme]]
Neo-Emacs will automatically download the jdtls from `lsp-java-jdt-download-url`, and now it's located at [[https://www.eclipse.org/downloads/download.php?file=/jdtls/milestones/1.22.0/jdt-language-server-1.22.0-202304131553.tar.gz][jdt-language-server-1.22.0]].After that you could use all the features powered by eclipse.
- Generate eclipse files
  Execute mvn command for generate eclipse .project & .classpath files on your project root path.
  #+ATTR_LATEX: :options numbers=left, commentstyle=\color{violet}
  #+BEGIN_SRC shell
  mvn eclipse:clean eclipse:eclipse
  #+END_SRC
- Support projectlombok plugin
  There have a default lombok.jar in ~doom-user-dir/neoemacs~ which you could replace by yourself.
  #+begin_src elisp
  (setq  lombok-jar-path (expand-file-name (concat doom-user-dir "neoemacs/lombok.jar")
  #+end_src
- Shotcuts/Key binding
 #+CAPTION: java mode key binding
 | <l>     | <l>                                | <l>                             |
 | KEY     | FUNCTION                           | DESCRIPTION                     |
 | SPC c i | find-implementations               | find where sub class definition |
 | SPC c I | lsp-java-open-super-implementation | find where sub class definition |
 | SPC t e | lsp-treemacs-java-deps-list        | find projects referenced libs   |
 | SPC c f | formart buffer/region              | goto type definition            |
 | SPC c a | lsp-execute-code-action            | code action                     |
 | SPC c d | lsp-jump-definition                | jump to where symbol definition |
 | SPC c D | lsp-jump-reference                 | jump to where symbol referenced |
 | SPC c o | lsp-java-organize-imports          | import require package          |
 | SPC t s | lsp-workspace-restart              | restart lsp server              |
- How to upgrade jdtls
  1. Customization your own eclipse jdtls project version by replace it's binary pacage.
  2. Download the lastest jdt-language-server from https://download.eclipse.org/jdtls/milestones.
  3. Replace file to ~/.emacs.d/.local/etc/lsp/eclipse.jdt.ls.

** Vterm Shell
#+begin_notice-warning
Vterm is not available on windows.
Thus windows user have to use eshell as a downgrade plan.
#+end_notice-warning
*** Install vterm
If vterm complie failed in emacs, we could complie it manually.
#+begin_src bash
cd .emacs.d/.local/straight/build/vterm/
mkdir -p build
# install cmake and libtool-bin
brew install cmake, brew install libtool
mkdir -p build
cd build
cmake ..
make
#+end_src
*** Fish shell optimize
If you are using fish shell ,fortunately there have some optimize config prepared for you.
- feature:
  - use fish shell on emacs vterm.
  - use command `ff` %anyfile% on vterm will open %anyfile% in a new emacs buffer.It's very useful.
#+begin_src
if [ "$INSIDE_EMACS" = 'vterm' ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    end
end
function vterm_cmd --description 'Run an Emacs command among the ones been defined in vterm-eval-cmds.'
    set -l vterm_elisp ()
    for arg in $argv
        set -a vterm_elisp (printf '"%s" ' (string replace -a -r '([\\\\"])' '\\\\\\\\$1' $arg))
    end
    vterm_printf '51;E'(string join '' $vterm_elisp)
end
function ff
    set -q argv[1]; or set argv[1] "."
    vterm_cmd find-file (realpath "$argv")
end
#+end_src

*** Usage
- Being with eshell
  Eshell have a most wanted feature was *quickrun-eshell* which have a fast reload function after shell is runinng,you just use ~C-c C-c~ to stop it and use *r* to return you shell script file.It's pretty convenient.
- Key Binding
   | <l>     | <l>                  | <l>                                             |
   | KEY     | FUNCTION             | DESCRIPTION                                     |
   | SPC v v | projectile-run-vterm | open vterm window base on the project root path |
   | SPC v p | vterm-send-start     | enable vterm screen roll                        |
   | SPC v s | vterm-send-stop      | disable vterm screen roll                       |
** Ejc Sql
- The privacy configuration
   In here you could save any connections in your setting config.
   But where should the setting located especially for our Emacs config project with a public github repository? There have a privacy path which is excluded in the public repository named *user-private-dir*, You could config your connection's account/password here for safely.
   There default load a db-work module which having your privacy config .
   #+begin_src elisp
    (add-to-list 'load-path user-private-dir )
    (use-package! db-work                    )
   #+end_src
- Config your particular db connection
   #+ATTR_LATEX: :options numbers=left, commentstyle=\color{violet}
   #+begin_src lisp
   (use-package ejc-sql
   :commands ejc-sql-mode ejc-connect
   :config
   (setq clomacs-httpd-default-port 18090)
   (ejc-create-connection "connection-name"
           :classpath      "~/.m2/repository/mysql/mysql-connector-java/8.0.17/
               mysql-connector-java-8.0.17.jar"
           :connection-uri "jdbc:mysql://localhost/user?useSSL=false&user=root&password=pwd"
           :separator      "</?\.*>" )
   )
   (provide 'db-work)
   #+end_src
  #+latex:\newpage
- Write Sql file
   Before try to use ejc sql, firstly create a sql file which named with a suffix *.sql*, cause emacs will turn on the sql minor mode so that ejc-sql could works well. And then use ~SPC e c~ to connect a particular database which you have configurated. Emacs will popup a minibuffer listing candidates which show you the *connection-name*.
   Secondarily, write your testing sql content which surrounded by a tag, cause we have configurated *:separator* by a syntax meaning tag in order to execute a single sql rather than to choose it.For sure you could make any comment with the tag's schema.
   Further more, you could use delimiter sign for batch execution. the delimiter could customization by any character.
   Finnaly, use ~C-c C-c~ to execute it. It's just execute the content which surrounded by a tag in your cusor.
   #+BEGIN_SRC sql -n
   <SELECT name='select all org'>
   SELECT * FROM TABLE_ORG
   </SELECT>

   <SELECT>
   delimiter ;
   COMMENT ON COLUMN TABLE_ORG.PROJECT_CODE IS '项目编码';
   COMMENT ON COLUMN TABLE_ORG.PERIOD IS '期间';
   </SELECT>
   #+END_SRC
- key binding
    | <l>     | <l>            | <l>                        |
    | KEY     | FUNCTION       | description                |
    | SPC e c | ejc-connection | choose connection with ivy |
    | C-c C-c | ejc-execute    | execute the sql            |
** Emacs Rime
[[https://github.com/DogLooksGood/emacs-rime][Emacs Rime]] which makes to embedding an input method be possible whthin the emacs.Emacs could benefit form the flexible configuration of [[https://rime.im/][rime]].
On macos it's required to install *Squirrel* which is one of rime's distribution. *Squirrel* is installed in your os system as a input method.
Note that the configuration of rime located at home/Library/Rime/. We want to sharing this configuration between Eamcs rime and os rime.
So there have a variable which named ~rime-user-data-dir~ , And another important variable is ~rime-librime-root~ which configed the librime location.
| variable           | required |
| rime-user-data-dir | true     |
| rime-librime-root  | true     |

[[./modules/neo-emacs/rime/readme.org][futher more rime readme]]
** Org mode
[[./modules/neo-emacs/org/readme.org][futher more org readme]]
*** Install Dependency
There have some third party lib we need prepare.
**** dot graphviz
#+begin_src shell
brew install graphviz
#+end_src
**** d2 diagram
[[https://github.com/terrastruct/d2/blob/master/docs/INSTALL.md][d2 installation]]
#+begin_src shell
brew install/upgrade d2
brew install/upgrade terrastruct/tap/tala

alias ds2 "/opt/homebrew/bin//d2 --sketch --animate-interval=1400 -l elk -c --pad 0"
alias d2 "/opt/homebrew/bin//d2 --pad 0 --layout tala "
#+end_src
*** Image to base64
No need to sent images files of the source.
The embedded base64 image make to distribute your html documentation more easily.
*** Optimize Line Number
Just hidden the colon after line number character.
Modify `~/.emacs.d/.local/straight/repos/org/lisp/ox-html.el`.

#+begin_src elisp -n
(let* ((code-lines (split-string code "\n"))
   (code-length (length code-lines))
   (num-fmt
	(and num-start
	     (format "%%%ds "
	     (format "%(add-hook 'code-review-mode-hook
        (lambda ()
          ;; include *Code-Review* buffer into current workspace
          (persp-add-buffer (current-buffer))))%%ds: "
#+end_src
*** Image Directory
Cause org mode html export program  need a image directory locate at org root directory.
Highly recommended:
Use ~ln~ making an mirror of the directory.
Make the image directory as your screenshot file's saving location.
#+begin_src shell
ln -s ~/org/org-roam/image any_where/image
#+end_src
** Restclient
Restclient provide a test suite for HTTP REST in Emacs.The official repository here [[https://github.com/pashky/restclient.el][restclient.el]].
Yea, a pretty old old project.Fortunately doom emacs have integrated it.We just need open it with ~(rest +jq)~.
*+jq* makes restclient have the ability to parse a particular response which Content-Type equalable application/json.
The amazing feature is restclient support set variables or make a part of response being a variables which one could as a request part for another HTTP REST.

Here we take the value from results as a variables which named count.
#+begin_src restclient
GET https://www.zhihu.com/api/v3/oauth/sms/supported_countries
-> jq-set-var :count .count
#+end_src
#+begin_quote
Only *jq-set-var* could works when the content-type equal to application/json MIME type
#+end_quote

Fortunately we have solution for other mime type, it's restclient-set-var, you could use elisp to parse the response;
#+begin_src restclient
GET https://www.baidu.com/sugrec
-> run-hook (restclient-set-var ":queryid" (cdr (assq 'queryid (json-read))))
Content-Type: application/x-www-form-urlencoded; charset=utf-8
#+end_src

About the variables infomation in current buffer, we could use ~C-c Tab~ to show them.

** Eredis Usage
*** config
Use eredis firstly we could writen a funtion for a particular redis connection like this.
#+begin_src elisp
(use-package eredis)
(defun redis-tencent-dev (dbnum)
  (interactive)
  (setq redis-tencent-dev (eredis-connect "tencent.local" 6379))
  (eredis-auth "yourpassword" redis-tencent-dev)
  (eredis-select dbNum)
)
#+end_src
Then you could use *M-x* ielm execution any redis command.
#+begin_src elisp
(redis-tencent-dev 1)
(eredis-get "center-bpm:flow-list-count")
#+end_src
*** send redis command on org mode
key binding C-c C-c
#+begin_src lisp
;; select database
(eredis-select 1)
;; query center-bpm:flow-list-count
(eredis-get "center-bpm:flow-list-count")
(eredis-org-table-from-keys '("center-bpm:flow-list-count" ))
#+end_src

| Key                        | Value(s) | Type   |
| center-bpm:flow-list-count |        1 | string |
** Bookmark
- set a particular location for bookmark
  #+begin_src lisp
  (setq bookmark-default-file "~/org/org-roam/command/doom/config/bookmark")
  #+end_src
- key binding
  | key     | binding           |
  | Spc-Ent | select a bookmark |
  | Spc b m | set a bookmark    |
  | Spc b M | delete a bookmark |
** Elpa Offline
rsync -avz rsync://mirrors.tuna.tsinghua.edu.cn/elpa ~/soft/emacs-elpa
#+begin_src elisp
(setq configuration-layer--elpa-archives
      '(("melpa-cn" . "/soft/emacs-elpa/melpa/")
        ("org-cn"   . "/soft/emacs-elpa/org/")
        ("gnu-cn"   . "/soft/emacs-elpa/gnu/")
        ("marmalade-cn"   . "/soft/emacs-elpa//marmalade/")))
#+end_src
* Customize Farther
For customize farther, there have some documentation you need read.
https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org
[[https://github.com/BurntSushi/ripgrep]]
[[https://github.com/junegunn/fzf]]
[[https://github.com/kostafey/ejc-sql]]
https://leiningen.org/
[[https://plantuml.com/]]
[[https://github.com/emacs-lsp/lsp-java]]
https://projectlombok.org/
https://github.com/DogLooksGood/emacs-rime
[[https://github.com/be5invis/Sarasa-Gothic]]
[[https://github.com/akicho8/string-inflection]]
https://raw.githubusercontent.com/alibaba/p3c/master/p3c-formatter/eclipse-codestyle.xml
https://www.tug.org/mactex/
