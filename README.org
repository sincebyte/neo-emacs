#+title: neo emacs
#+AUTHOR: vanniuner
# #!define DARKORANGE/LIGHTORANGE/DARKBLUE/LIGHTBLUE/DARKRED/LIGHTRED/DARKGREEN/LIGHTGREEN
# #!includeurl /Users/van/org/org-roam/C4-PlantUML/juststyle.puml
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://emacs-1308440781.cos.ap-chengdu.myqcloud.com/org_css.css"/>
#+HTML_HEAD: <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://emacs-1308440781.cos.ap-chengdu.myqcloud.com/scroll.js"></script>
#+HTML_HEAD: <a href="https://github.com/vanniuner/neo-emacs" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

#+OPTIONS: prop:nil timestamp:t \n:t ^:nil f:t toc:t author:t num:t H:2
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: elegantpaper
#+MACRO: htmlred @@html:<font color="red"></font>@@
#+MACRO: latexred @@latex:{\color{red}@@@@latex:}@@
#+latex:\newpage


[[file:./image-use.png]]

* About
Neo emacs is a configuration framework for GNU Emacs which is based on doom emacs and focuses on the java web application coding environment. Neo emacs has the following features:
- Code completion: Lsp-java supports maven and gradle project.
- Program debugging: Dap-java supports program debugging.
- Http client: Rest-client is a tool to manually explore and test HTTP REST webservices just like Postman.
- SQL client: Ejc-sql turns Emacs into a simple SQL client which supports various databases.
- Redis client: Eredis Non-blocking Redis client with focus on performance and robustness.
- Terminal emulator: Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm.
- Knowledge management system: Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking.
- [[http://1.117.167.195/doc/neo-emacs.html][onlinedoc]]

* How to install
** Install emacs
There have many emacs distribution,just choose one and install it.
- [[https://www.gnu.org/software/emacs/][gnu-emacs]] is the official emacs client.
- [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] which I used for a long time.
- Building Emacs form source

  building emacs with with source code
  #+begin_src shell -n
  git clone git://git.savannah.gnu.org/emacs.git
  cd emacs
  git checkout emacs-28
  brew install  libxml2
  make configure
  ./configure --with-native-compilation --with-modern-papirus-icon --with-no-titlebar
  make -j4
  make install
  open nextstep/Emacs.app
  #+end_src
- EmacsPorts

  EmacsPorts is the best choice to run NeoEmcas on macos.
  #+begin_src shell
  brew install emacs-mac --with-natural-title-bar --with-mac-metal
  --with-librsvg --with-starter --with-emacs-big-sur-icon --with-native-comp
  defaults write org.gnu.Emacs TransparentTitleBar DARK
  defaults write org.gnu.Emacs HideDocumentIcon kES
  #+end_src

After emacs installation, set environment variables which names EMACS ,this depends on your emacs exec path.
#+begin_src shell
export EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs,
#+end_src
** Clone project
clone doom-emacs and neo-emacs from github.
#+BEGIN_SRC shell
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
git clone --depth 1 https://github.com/vanniuner/neo-emacs.git ~/.doom.d/
#+END_SRC
** Doom Install
Set up a vpn if you need it.

#+BEGIN_SRC shell
export http_proxy="ip:port"
export https_proxy="ip:port"
#+END_SRC

Set your emacs cmd for doom install.

#+BEGIN_SRC shell
export EMACS= $YOUR EMACS CMD PATH$
#+END_SRC

At last run below, this will take few minutes. And it depends on the quality of your network.

#+BEGIN_SRC shell
~/.emacs.doom/bin/doom install
#+END_SRC
* How to update
#+begin_src shell
export EMACS=/Applications/Emacs.app/Contents/MacOS/EMACS
sh ~/.emacs.d/bin/doom upgrade
sh ~/.emacs.d/bin/doom install
sh ~/.emacs.d/bin/doom sync
#+end_src
* Private setting
Customize your private setting config in the config.el ;
kse ~setq~
#+begin_src elisp
(setq fd-exec-path                   "/opt/homebrew/bin/fd"
      rg-exec-path                   "/opt/homebrew/bin/rg")
#+end_src

#+CAPTION: neo-emacs basic setting
| <l>                       | <l>                                     | <l>                     |
| emacs-module-root         | /opt/homebrew/opt/emacs-plus@28/include | emcas module root       |
| rg-exec-path              | "/opt/homebrew/bin/rg"                  | rg            exec path |
| fd-exec-path              | "/opt/homebrew/bin/fd"                  | fd            exec path |
| dot-exec-path             | "/opt/homebrew/bin/dot"                 | dot           exec path |
| pdflatex-exec-path        | "/Library/TeX/texbin/pdflatex"          | pdflatex      exec path |
| node-bin-dir              | "~/node-v16.14.0/bin"                   | node exec path          |
| lsp-java-jdt-download-url | http://1.117.167.195/download           | jdt-server URL          |
| lsp-java-java-path        |                                         | java11        exec path |
| lsp-maven-path            | "~/.m2/settings.xml"                    | maven setting path      |
| org-directory             | "~/org/"                                | org           root path |
| org-roam-directory        | "~/org/org-roam"                        | org roam      root path |
| display-line-numbers-type | nil                                     | show line number        |
| rime-user-data-dir        | "~/Library/Rime/"                       | rime config input       |
| rime-librime-root         | "~/.doom.d/myconfig/rime-macos/dist"    | emacs-rime/blob/master/ |

* Neoemacs modules
#+transclude: [[./modules/neoemacs/java/readme.org][java-readme.org]] :level 2
#+transclude: [[./modules/neoemacs/sql/readme.org][sql-readme.org]] :level 2
** Restclient
Restclient provide a test suite for HTTP REST in Emacs.The official repository here [[https://github.com/pashky/restclient.el][restclient.el]].
Yea, a pretty old old project.Fortunately doom emacs have integrated it.We just need open it with ~(rest +jq)~.
*+jq* makes restclient have the ability to parse a particular response which Content-Type equalable application/json.
The amazing feature is restclient support set variables or make a part of response being a variables which one could as a request part for another HTTP REST.

Here we take the value from results as a variables which named count.
#+begin_src restclient
GET https://www.zhihu.com/api/v3/oauth/sms/supported_countries
-> jq-set-var :count .count
#+end_src
#+begin_quote
Only *jq-set-var* could works when the content-type equal to application/json MIME type
#+end_quote

Fortunately we have solution for other mime type, it's restclient-set-var, you could use elisp to parse the response;
#+begin_src restclient
GET https://www.baidu.com/sugrec
-> run-hook (restclient-set-var ":queryid" (cdr (assq 'queryid (json-read))))
Content-Type: application/x-www-form-urlencoded; charset=utf-8
#+end_src

About the variables infomation in current buffer, we could use ~C-c Tab~ to show them.

** Company box customize
- use `M-x all-the-icons-material` for checking icon
- company-icon icon config file: ~/.emacs.d/modules/completion/company/config.el
** Eredis Usage
*** config
Use eredis firstly we could writen a funtion for a particular redis connection like this.
#+begin_src elisp
(use-package eredis)
(defun redis-tencent-dev (dbnum)
  (interactive)
  (setq redis-tencent-dev (eredis-connect "tencent.local" 6379))
  (eredis-auth "yourpassword" redis-tencent-dev)
  (eredis-select dbNum)
)
#+end_src
Then you could use *M-x* ielm execution any redis command.
#+begin_src elisp
(redis-tencent-dev 1)
(eredis-get "center-bpm:flow-list-count")
#+end_src
*** send redis command on org mode
key binding C-c C-c
#+begin_src lisp
;; select database
(eredis-select 1)
;; query center-bpm:flow-list-count
(eredis-get "center-bpm:flow-list-count")
(eredis-org-table-from-keys '("center-bpm:flow-list-count" ))
#+end_src

| Key                        | Value(s) | Type   |
| center-bpm:flow-list-count |        1 | string |
** Bookmark
- set a particular location for bookmark
  #+begin_src lisp
  (setq bookmark-default-file "~/org/org-roam/command/doom/config/bookmark")
  #+end_src
- key binding
  | key     | binding           |
  | Spc-Ent | select a bookmark |
  | Spc b m | set a bookmark    |
  | Spc b M | delete a bookmark |
** Rime Usage
- https://github.com/DogLooksGood/emacs-rime supply this plugin.
- https://github.com/rime/plum for more infomation.
- The config location at ~/Library/Rime/flypy_sys.txt
- Rime input method config at .doom.d/myconfig/rime-config.
- 'emacs-module.h' file not found
 #+begin_src shell
  lib.c:23:10: fatal error: 'emacs-module.h' file not found
    #include <emacs-module.h>
            ^~~~~~~~~~~~~~~~
 #+end_src

 #+begin_src shell
 cp /opt/homebrew/opt/emacs-plus@29/include/emacs-module.h ~/.doom.d/neoemacs/rime-macos/dist/include
 #+end_src
** Libvterm Usage
- Configuration
  - fish shell configuration
  #+begin_src shell
  function vterm_printf;
      if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end
          # tell tmux to pass the escape sequences through
          printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
      else if string match -q -- "screen*" "$TERM"
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$argv"
      else
          printf "\e]%s\e\\" "$argv"
      end
  end
  if [ "$INSIDE_EMACS" = 'vterm' ]
      function clear
          vterm_printf "51;Evterm-clear-scrollback";
          tput clear;
      end
  end
  #+end_src
- Ubuntu
    #+begin_src shell
    sudo apt install cmake
    sudo apt install libtool-bin
    #+end_src
- MacOs
    #+begin_src shell
    sudo brew install cmake libtool
    #+end_src
- Key Binding
   | <l>     | <l>                  | <l>                                             |
   | KEY     | FUNCTION             | DESCRIPTION                                     |
   | SPC v v | projectile-run-vterm | open vterm window base on the project root path |
   | SPC v p | vterm-send-start     | enable vterm screen roll                        |
   | SPC v s | vterm-send-stop      | disable vterm screen roll                       |
** Elpa Offline
rsync -avz rsync://mirrors.tuna.tsinghua.edu.cn/elpa ~/soft/emacs-elpa
#+begin_src elisp
(setq configuration-layer--elpa-archives
      '(("melpa-cn" . "/soft/emacs-elpa/melpa/")
        ("org-cn"   . "/soft/emacs-elpa/org/")
        ("gnu-cn"   . "/soft/emacs-elpa/gnu/")
        ("marmalade-cn"   . "/soft/emacs-elpa//marmalade/")))
#+end_src
** FZF Config
*** fish config
#+begin_src shell
set -x FZF_DEFAULT_OPTS "--preview-window 'right:57%'
    --preview 'bat --style=numbers --line-range :300 {}'
    --bind ctrl-y:preview-up,ctrl-e:preview-down,ctrl-b:preview
    -page-up,ctrl-f:preview-page-down,ctrl-u:preview-half-page-
    up,ctrl-d:preview-half-page-down,shift-up:preview-top,shift
    -down:preview-bottom,alt-up:half-page-up,
    alt-down:half-page-down"
set -x FZF_DEFAULT_COMMAND  'fd --type f --hidden --follow
    --exclude ".git" .
    ".idea" . ".vscode" . "node_modules" .
    "build" . "target" . "classes" . "out" . "class" .
    "*.svg" . "*.puml" . "*.orgids" . "*.css" . "*.DS_Store" '
#+end_src
*** how to ignore files
- add ~/.fdignore
  #+begin_src txt
    .DS_Store
    .orgids
    *.svg
    *.puml
    *.css
    *.class
    *.attach
    *.~undo-tree~
    crpt
  #+end_src
* Org mode
** Doom org style
A vairty of template about org mode code which one referenced the doom doc style [[http://1.117.167.195/doc/doomorgstyle.html][Preview]]
How to use? [[https://github.com/vanniuner/doom-org-style]]
** Dot sketchviz
#+begin_src shell
    cd ~/.doom.d/neoemacs/sketchviz/sketch.js
    npm install --save roughjs
    npm i jsdom
#+end_src

- usage
    #+BEGIN_SRC dotsk :file dotsk-demo.svg
        digraph G {
            bgcolor="transparent"
            rankdir = LR
            a -> b [minlen=2,label="ϟ"]
        }
    #+END_SRC

    #+RESULTS:
    [[file:dotsk-demo.svg]]

** Latex PDF setting
1. install [[https://tug.org/mactex/][mactex]]
2. put [[https://github.com/ElegantLaTeX/ElegantPaper/blob/master/elegantpaper.cls][elegantpaper.cls]] under the org file dir
3. add the code in the head of your org mode file
   #+begin_src org
    #+LATEX_COMPILER: xelatex
    #+LATEX_CLASS: elegantpaper
    #+OPTIONS: prop:t
   #+end_src

4. [[https://www.sheerwill.live/posts/main/20220723211325-vanilla_emacs_with_purcell/][more info]]
* Alfred
Alfred repeat item
perference -> Advanced -> Rebuild macOS Metadata.
alfred -> reload
* Questions
** install ffmpeg
- brew install ffmpeg
** how to install all-the-icons?
- M-x install-package all-the-icons
- M-x all-the-icons-install-fonts
** how to install rime ?
- M-x install-package rime
unzip rime-1.5.3-osx.zip -d ~/.emacs.d/librime
** how to install vterm?
#+begin_src bash
cd .emacs.d/.local/straight/build/vterm/
mkdir -p build
# install cmake and libtool-bin
brew install cmake, brew install libtool
mkdir -p build
cd build
cmake ..
make
#+end_src
** lsp-springboot
#+begin_src bash
mvn -Djdt.js.server.root=/Users/van/.emacs.d/.local/etc/.cache/
lsp/eclipse.jdt.ls/server/ -Djunit.runner.root=
/Users/van/.emacs.d/.local/etc/eclipse.jdt.ls/test-runner/
-Djunit.runner.fileName=junit-platform-console-standalone.jar
-Djava.debug.root=/Users/van/.emacs.d/.local/etc/.cache/lsp/
eclipse.jdt.ls/server/bundles clean package
-Djdt.download.url=http://download.eclipse.org/jdtls/snapshots/
jdt-language-server-latest.tar.gz -f lsp-java-server-build.pom
#+end_src
** useful key setting
- Change caps_lock to control if pressed with other keys, to escape if pressed alone.
  [[file:key-change.png]]

** why message showed could not load undo-tree history
#+begin_src shell
brew install watchexec
#+end_src
** File mode specification error: (file-missing Doing vfork No such file or directory)
When open a Java file this error happen.
It's because the environment do not content on your GUI Emacs.
It works well on your termianl environment with start Emacs by Emacs -nw.
So the solution is change the execution file with the below shell script on MacOs
- emacs-plus cp to application dir
#+begin_src shell
    cp -rf /opt/homebrew/opt/emacs-plus@28/Emacs.app/ /Applications/
    mv /Applications/Emacs.app/Contents/MacOS/Emacs Emacs.old
#+end_src
- /Applications/Emacs.app/Contents/MacOS/Emacs
#+begin_src shell
    #!/usr/local/bin/fish
    /Applications/Emacs.app/Contents/MacOS/Emacs.old
#+end_src
** image dir
#+begin_src shell
ln -s ~/org/org-roam/image any_where/image
#+end_src
* About Logo
edit with: [[https://ps.gaoding.com/#/][online-ps-editor]], [[./logo.psd][psd file]]
* Dependencies

https://github.com/hlissner/doom-emacs/blob/master/docs/getting_started.org

[[https://github.com/BurntSushi/ripgrep]]

[[https://github.com/junegunn/fzf]]

[[https://github.com/kostafey/ejc-sql]]

https://leiningen.org/

[[https://plantuml.com/]]

[[https://github.com/emacs-lsp/lsp-java]]

https://projectlombok.org/

https://github.com/DogLooksGood/emacs-rime

[[https://github.com/be5invis/Sarasa-Gothic]]

[[https://github.com/akicho8/string-inflection]]

https://raw.githubusercontent.com/alibaba/p3c/master/p3c-formatter/eclipse-codestyle.xml

https://www.tug.org/mactex/
